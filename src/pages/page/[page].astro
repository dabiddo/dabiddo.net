---
import Layout from "../../layouts/Layout.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import { getCollection } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";

export async function getStaticPaths() {
    const allPosts = await getCollection("blog");
    const sortedPosts = allPosts.sort(
        (a, b) =>
            new Date(b.data.pubDate).valueOf() -
            new Date(a.data.pubDate).valueOf(),
    );

    const postsPerPage = 15;
    const totalPages = Math.ceil(sortedPosts.length / postsPerPage);

    return Array.from({ length: totalPages - 1 }).map((_, index) => {
        const pageNum = index + 2; // Start from page 2
        const start = (pageNum - 1) * postsPerPage;
        const end = start + postsPerPage;

        return {
            params: { page: pageNum.toString() },
            props: {
                posts: sortedPosts.slice(start, end),
                currentPage: pageNum,
                totalPages,
            },
        };
    });
}

const { posts, currentPage, totalPages } = Astro.props;
---

<Layout title={SITE_TITLE} description={SITE_DESCRIPTION}>
    <div>
        <h2>Latest Blog Posts.</h2>
        <ul>
            {
                posts.map((post, idx) => (
                    <li key={post.id}>
                        <a
                            href={`/blog/${post.id}/`}
                            style={{
                                display: "flex",
                                alignItems: "center",
                                fontFamily: "monospace",
                                textDecoration: "none",
                            }}
                        >
                            <span style={{ flexShrink: 0 }}>
                                {idx + 1}.- {post.data.title}
                            </span>
                            <span
                                style={{
                                    flexGrow: 1,
                                    borderBottom: "1px dotted var(--accent)",
                                    margin: "0 8px",
                                    height: 0,
                                }}
                            />
                            <span style={{ flexShrink: 0 }}>
                                <FormattedDate date={post.data.pubDate} />.
                            </span>
                        </a>
                    </li>
                ))
            }
        </ul>

        <!-- Pagination controls -->
        <div class="pagination">
            <a href={currentPage === 2 ? "/" : `/page/${currentPage - 1}`}
                >Previous</a
            >
            <span>Page {currentPage} of {totalPages}</span>
            {
                currentPage < totalPages && (
                    <a href={`/page/${currentPage + 1}`}>Next</a>
                )
            }
        </div>
    </div>
</Layout>
<style>
    .pagination {
        display: flex;
        gap: 1rem;
        align-items: center;
        justify-content: center;
        margin-top: 2rem;
    }
</style>
